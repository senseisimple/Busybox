From: Tias Guns <tias@ulyssis.org>
Date: Tue, 20 Mar 2012 21:26:07 +0000
Subject: [PATCH] fix ipcs, ipcrm: add semctl msgctl shmctl ipcget (semget msgget shmget)

also needed (but not sufficient) for syslogd and logread

patch from 'no-sys-shm,msg,sem' by Dan Drown
"
there are no type macros for MQ/SEM/SHM/TMO
system calls to manage/use sysvipc types: shm/sem/msg
semctl from glibc
there is no sys/sem, sys/shm, or sys/msg, use linux/sem.h and related
"
http://dan.drown.org/android/src/busybox/
---
 libbb/Kbuild.src   |    2 +
 libbb/ipcget.c     |   18 +++++++++++++++++
 libbb/msgctl.c     |    7 ++++++
 libbb/semctl.c     |   55 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 libbb/shmctl.c     |    8 +++++++
 util-linux/ipcrm.c |    9 ++++---
 util-linux/ipcs.c  |    9 ++++---
 7 files changed, 100 insertions(+), 8 deletions(-)
 create mode 100644 libbb/ipcget.c
 create mode 100644 libbb/msgctl.c
 create mode 100644 libbb/semctl.c
 create mode 100644 libbb/shmctl.c

diff --git a/libbb/Kbuild.src b/libbb/Kbuild.src
index ade87b2..9c0d13f 100644
--- a/libbb/Kbuild.src
+++ b/libbb/Kbuild.src
@@ -119,6 +119,8 @@ lib-y += xrealloc_vector.o
 lib-y += mntent_r.o
 lib-y += getsid.o
 lib-y += mempcpy.o
+lib-y += shmctl.o semctl.o msgctl.o
+lib-y += ipcget.o # shmget msgget semget
 
 lib-$(CONFIG_PLATFORM_LINUX) += match_fstype.o
 
diff --git a/libbb/ipcget.c b/libbb/ipcget.c
new file mode 100644
index 0000000..39985fb
--- /dev/null
+++ b/libbb/ipcget.c
@@ -0,0 +1,18 @@
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/syscall.h>
+#include <linux/shm.h>
+#include <linux/msg.h>
+#include <linux/sem.h>
+
+int shmget(key_t key, size_t size, int shmflg) {
+  return syscall(__NR_shmget, key, size, shmflg);
+}
+
+int msgget(key_t key, int msgflg) {
+  return syscall(__NR_msgget, key, msgflg);
+}
+
+int semget(key_t key, int nsems, int semflg) {
+  return syscall(__NR_semget, key, nsems, semflg);
+}
diff --git a/libbb/msgctl.c b/libbb/msgctl.c
new file mode 100644
index 0000000..7214d09
--- /dev/null
+++ b/libbb/msgctl.c
@@ -0,0 +1,7 @@
+#include <unistd.h>
+#include <sys/syscall.h>
+#include <linux/msg.h>
+
+int msgctl(int msqid, int cmd, struct msqid_ds *buf) {
+  return syscall(__NR_msgctl, msqid, cmd, buf);
+}
diff --git a/libbb/semctl.c b/libbb/semctl.c
new file mode 100644
index 0000000..2b83f52
--- /dev/null
+++ b/libbb/semctl.c
@@ -0,0 +1,55 @@
+/* Copyright (C) 1995,1997,1998,2000,2003,2004,2006
+        Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Ulrich Drepper <drepper@gnu.ai.mit.edu>, August 1995.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+/* originally from glibc-2.14/sysdeps/unix/sysv/linux/semctl.c, modified */
+
+#include <unistd.h>
+#include <sys/syscall.h>   /* For __NR_xxx definitions */
+#include <stdarg.h>
+#include <linux/sem.h>
+
+/* code from GLIBC */
+int semctl(int semid, int semnum, int cmd, ...) {
+  union semun arg;
+  va_list ap;
+
+  va_start (ap, cmd);
+
+  /* Get the argument only if required.  */
+  arg.buf = NULL;
+  switch (cmd)
+  {
+    case SETVAL:        /* arg.val */
+    case GETALL:        /* arg.array */
+    case SETALL:
+    case IPC_STAT:      /* arg.buf */
+    case IPC_SET:
+    case SEM_STAT:
+    case IPC_INFO:      /* arg.__buf */
+    case SEM_INFO:
+      va_start (ap, cmd);
+      arg = va_arg (ap, union semun);
+      va_end (ap);
+      break;
+  }
+
+  va_end (ap);
+
+  return syscall(__NR_semctl, semid, semnum, cmd, arg);
+}
diff --git a/libbb/shmctl.c b/libbb/shmctl.c
new file mode 100644
index 0000000..71c5e8c
--- /dev/null
+++ b/libbb/shmctl.c
@@ -0,0 +1,8 @@
+#include <unistd.h>
+#include <sys/syscall.h>
+#include <linux/shm.h>
+
+// NOTE: IPC_INFO takes a struct shminfo64
+int shmctl(int shmid, int cmd, struct shmid_ds *buf) {
+  return syscall(__NR_shmctl, shmid, cmd, buf);
+}
diff --git a/util-linux/ipcrm.c b/util-linux/ipcrm.c
index 274050c..b65e8ef 100644
--- a/util-linux/ipcrm.c
+++ b/util-linux/ipcrm.c
@@ -22,11 +22,12 @@
 /* X/OPEN tells us to use <sys/{types,ipc,sem}.h> for semctl() */
 /* X/OPEN tells us to use <sys/{types,ipc,msg}.h> for msgctl() */
 #include <sys/ipc.h>
-#include <sys/shm.h>
-#include <sys/msg.h>
-#include <sys/sem.h>
+#include <linux/shm.h>
+#include <linux/msg.h>
+#include <linux/sem.h>
 
-#if defined(__GNU_LIBRARY__) && !defined(_SEM_SEMUN_UNDEFINED)
+#if (defined(__GNU_LIBRARY__) && !defined(_SEM_SEMUN_UNDEFINED)) || \
+    defined(__ANDROID__)
 /* union semun is defined by including <sys/sem.h> */
 #else
 /* according to X/OPEN we have to define it ourselves */
diff --git a/util-linux/ipcs.c b/util-linux/ipcs.c
index ee7df5e..fafe4e3 100644
--- a/util-linux/ipcs.c
+++ b/util-linux/ipcs.c
@@ -29,9 +29,9 @@
 /* X/OPEN tells us to use <sys/{types,ipc,shm}.h> for shmctl() */
 #include <sys/types.h>
 #include <sys/ipc.h>
-#include <sys/sem.h>
-#include <sys/msg.h>
-#include <sys/shm.h>
+#include <linux/sem.h>
+#include <linux/msg.h>
+#include <linux/shm.h>
 
 #include "libbb.h"
 
@@ -77,7 +77,8 @@ struct shm_info {
 /* The last arg of semctl is a union semun, but where is it defined?
    X/OPEN tells us to define it ourselves, but until recently
    Linux include files would also define it. */
-#if defined(__GNU_LIBRARY__) && !defined(_SEM_SEMUN_UNDEFINED)
+#if (defined(__GNU_LIBRARY__) && !defined(_SEM_SEMUN_UNDEFINED)) || \
+    defined(__ANDROID__)
 /* union semun is defined by including <sys/sem.h> */
 #else
 /* according to X/OPEN we have to define it ourselves */
-- 
1.7.0.4

